######################################################################
## Filament Change                                                  
######################################################################

[gcode_macro M600]
description: Pauses on runout or filament swap call, moves the printer head to the park position (M125), waits to initiate (M702), waits for load (M701), and then resumes the print (SWAP_RESUME).
##rename_existing: M600_BASE
variable_default_temp: 250	# Default temperature to heat up if M600 issued in terminal. Ignored if a target temperature is already set at launch ( M104 / M109 ) or started within a printjob
variable_cooldown: 0 # Whether the hotend should cool down or not when pause started. 1 - Hotend cools down when paused (Recommended for safety). 0 - Hotend stays hot
variable_park_z: 25 # mm to raise z from current height (this is a relative value)
variable_zmin: 50 # If current z height is below zmin (as an absolute value), head will lift to zmin ( as relative value) instead of park_z making it easier to clean the nozzle at that height
variable_load_new: 100 # mm to load filament (average length needed to purge out a totally different color)
variable_purge: 20 # Extract xx mm filament extra after loading if more purging is required to remove the old color
variable_unload: 100 # Total mm to unload filament (bowden tube length)
variable_unload_speed: 1000 # Speed at which filament is unloaded
variable_load_speed: 200 # Speed at which filament is loaded
variable_park_speed: 10000 # Speed at which hotend is moved to park position
variable_retract_park: 0.4 # Amount to retract on PAUSE to prevent oozing. Also used to as amount to extrude on RESUME
variable_timeout: 43200 # The time (S) the printer is allowed to wait for user input when [RUN_OUT] or [M600]. 

variable_temperature: 0
variable_ispaused : 0
variable_swapping : 0
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}

	SAVE_GCODE_STATE NAME=M600_state
	SET_GCODE_VARIABLE MACRO=M600 VARIABLE=swapping VALUE=1

	# Call the Pause macro below
	PAUSE

	# Disable the filament sensors
	DISABLE_FILAMENT_SENSORS	
	
	LOW_TEMP_CHECK T={temperature}

	M118 Awaiting filament swap. Use the macro UNLOAD FILAMENT to unload.
	
	#Cool the hotend as a precaution if defined
	{% if cooldown|int == 1 %}
			M104 S150
	{% endif %}
		
	# Set the printer idle timeout as above
	SET_IDLE_TIMEOUT TIMEOUT={timeout}
	

# [gcode_macro PAUSE]
# description: Pause the actual running print and move the print head out of the way
# rename_existing: PAUSE_BASE
# gcode:
	# {% if printer["gcode_macro M600"].ispaused|int == 0 %}
	
		# # Get the current temp of the extruder and save it
		# SET_GCODE_VARIABLE MACRO=M600 VARIABLE=temperature VALUE={printer.extruder.target}
		
		# # Call the original Pause macro
		# PAUSE_BASE
		
		# # Set relative positioning
		# G91
		
		# # If the extruder temp is currently above the min_extrude_temp in printer.cfg, retract a little
		# {% if printer.extruder.can_extrude|lower == 'true' %}
		
			# G1 E-{printer["gcode_macro M600"].retract_park} F2100
		  
		# {% endif %}
		
		# # Park the hotend
		# MOVE_TO_MAINTAINANCE_POSITION
		
	# {% endif %}
	
	# # Set the variable as is paused
	# SET_GCODE_VARIABLE MACRO=M600 VARIABLE=ispaused VALUE=1
	
	

[gcode_macro MOVE_TO_MAINTAINANCE_POSITION]
description: Move the print head to the park/maintainance position
gcode:
	# if  not yet homed
	C_G28
	
	# Set park positon for x and y. Max posion from printer.cfg
	{% set x_park = 300 %} #printer.toolhead.axis_maximum.x|float - 2.0 %}
	{% set y_park = 5 %} #printer.toolhead.axis_maximum.y|float - 2.0 %}	
	
	# Calculate the z park position. Max_z is from printer.cfg. Act_z is where the toolhead currently is
	{% set max_z = printer.toolhead.axis_maximum.z|float %}	
	{% set act_z = printer.toolhead.position.z|float %}
	
	# If the actual z is less than the max z position less the park position defined in M600, then do the next check.
	{% if act_z < (max_z - printer["gcode_macro M600"].park_z) %}
	
		# If the actual z is less than the minmimum set height in M600, then move it to that (e.g. first layer etc will go to this height)
		{% if act_z < printer["gcode_macro M600"].zmin %}
		
			{% set z_safe = printer["gcode_macro M600"].zmin %}
		# Otherwise, set it as the park_z height in M600 (this will be relative to the current position)
		{% else %}
		
			{% set z_safe = printer["gcode_macro M600"].park_z %}
			
		{% endif %}
	
	# Else set the safe z position as maximum z position from printer.cfg less the current toolhead position
	{% else %}
	
		{% set z_safe = max_z - act_z %}
		
	{% endif %}
		
	M118 Parking the printer head...
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F{printer["gcode_macro M600"].park_speed|int}
	


[gcode_macro UNLOAD_FILAMENT]
description: Unload the filament from the extruder.
gcode:
	# Check to see if the temp is lower than needed
	LOW_TEMP_CHECK

	# Commence unloading
	G91
	# Push 15mm to prevent end being deformed on unload
	G1 E15 F300
	# Unload
	G1 E-{printer["gcode_macro M600"].unload|int} F{printer["gcode_macro M600"].unload_speed|int}
	G92 E0.0
	G90
	
	M118 Unloading...
	
	G4 S{(printer["gcode_macro M600"].unload|int / printer["gcode_macro M600"].unload|int) * 60}
	
	M118 Filament unloading complete. Load new filament and run LOAD_FILAMENT 
	

[gcode_macro LOAD_FILAMENT]
description: Load the new filament into the toolhead.
gcode:
	M83
	G92 E0.0
	LOW_TEMP_CHECK
	
	{% if params.PURGE == true %}
			
		G1 E{printer["gcode_macro M600"].purge|int} F{printer["gcode_macro M600"].load_speed|int}
		
	{% else %}
		
		G1 E{printer["gcode_macro M600"].load_new|int} F{printer["gcode_macro M600"].load_speed|int}
		
	{% endif %}	

	# Retract a little to prevent ooze
	G1 E-{printer["gcode_macro M600"].retract_park} F2100
	
	G92 E0.0
	
	M118 Loading filament...please wait
	
	G4 S{(printer["gcode_macro M600"].load_new|int / printer["gcode_macro M600"].load_speed|int) * 60}
	
	{% if print_state == "Printing" %} 
	
		{% if params.PURGE == true %}
		
			M118 Purge complete. If needed, run PURGE_FILAMENT again, or SWAP_RESUME if complete.
			
		{% else %}
		
			M118 Filament loading complete. If needed, run PURGE_FILAMENT, or SWAP_RESUME if swapping.
			
		{% endif %}	
		
	{% else %}
	
		{% if params.PURGE == true %}
		
			M118 Purge complete. If needed, run PURGE_FILAMENT again. 
			
		{% else %}
		
			M118 Filament loading complete. If needed, run PURGE_FILAMENT again.
			
		{% endif %}	
	
	{% endif %}	
	
	
[gcode_macro PURGE_FILAMENT]
description: Purges the filament 20mm at a time.
gcode:
	LOAD_FILAMENT PURGE=true




# Use this command resume during a mid print filament swap
[gcode_macro SWAP_RESUME] 
description: Resumes the print after a filament swap.
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
	SET_GCODE_VARIABLE MACRO=M600 VARIABLE=swapping VALUE=0
	SET_GCODE_VARIABLE MACRO=M600 VARIABLE=ispaused VALUE=0
	
	RESTORE_FILAMENT_SENSOR
    
	
	# Extrude to normal again
	G1 E{printer["gcode_macro M600"].retract_park} F2100
	
    RESUME
	
	
	
	
	

### Created new menu items to swap filament out
[menu __main __filamentswap]
type: list
enable: true
name: Filament Swap

[menu __main __filamentswap __start]
type: command
name: Start swap
gcode:
	M600

[menu __main __filamentswap  __unload]
type: command
name: Unload
gcode:
    SAVE_GCODE_STATE NAME=__filamentswap__unload
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filamentswap__unload

[menu __main __filamentswap __loadnew]
type: command
name: Load
gcode:
    SAVE_GCODE_STATE NAME=__filamentswap__loadnew
	LOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filamentswap__loadnew

[menu __main __filamentswap __purge]
type: command
name: Purge
gcode:
    SAVE_GCODE_STATE NAME=__filamentswap__purge
	PURGE_FILAMENT
    RESTORE_GCODE_STATE NAME=__filamentswap__purge
	
[menu __main __filamentswap __complete]
type: command
name: Resume Print
gcode:
    SAVE_GCODE_STATE NAME=__filamentswap__complete
	SWAP_RESUME
    RESTORE_GCODE_STATE NAME=__filamentswap__complete

[menu __main __filamentswap __swapsensor]
type: command	
name: Swap Sensor
gcode:
	FILAMENT_SENSOR_SWAP






### Modified the existing menu items to reflect the same as above
[menu __main __filament __unloads]
type: command
name: Unload filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    LOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Load Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load




[menu __main __filament __unloadf]
type: command
enable: false
name: Unload Fil.fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loadf]
type: command
enable: false
name: Load Fil. fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    RESTORE_GCODE_STATE NAME=__filament__load


	
	
	
	
	

[gcode_macro LOW_TEMP_CHECK]
gcode:
	{% if not params.OVERRIDE is defined %}
		  {% if params.T is defined %}
				{% set TMP=params.T|int%}
				{% if printer.configfile.config.extruder.max_temp is defined %}
					{% if params.T|int>printer.configfile.config.extruder.max_temp|int %}
						{% set TMP=printer["gcode_macro M600"].default_temp|int %}
					{% endif %}
				{% endif %}
				{% if TMP|int==0 %}
				{% set TMP=printer["gcode_macro M600"].default_temp|int %}
		  {% endif %}
	 {% else %}
		  {% set TMP=printer["gcode_macro M600"].default_temp|int %}
		  {% if printer["gcode_macro M600"].temperature|int > 0 %}
				{% set TMP=printer["gcode_macro M600"].temperature %}
		  {% endif %}
	 {% endif %}
	 {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
		  {% if TMP|int<printer.configfile.config.extruder.min_extrude_temp|int %}
				{% set TMP=printer["gcode_macro M600"].default_temp %}
		  {% endif%}
	 {% endif %}
	 {% else %}
		  {% if params.T is defined %}
				{% set TMP=params.T|int %}
		  {% else %}
				{% set TMP=printer["gcode_macro M600"].default_temp %}
		  {% endif %}
	 {% endif %}
	  # If extruder is hot enough/within -5 degrees celsius of the set temperature
	{% if (printer.extruder.temperature|int + 5) >= TMP|int %}
		M118 Hotend temperature is ok
		M104 S{TMP}
	{% else %}
		M118 Hotend needs to heat back up. Standby
		M109 S{TMP}
	{% endif %}