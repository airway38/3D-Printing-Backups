[filament_motion_sensor SFS_1]
detection_length: 15
extruder: extruder
switch_pin: ^PG12
pause_on_runout: True
runout_gcode:
	{action_respond_info("RUNOUT: Filament runout")}
	M600
event_delay: 3.0
pause_delay: 0.5

[filament_motion_sensor SFS_2]
detection_length: 15
extruder: extruder
switch_pin: ^PG13
pause_on_runout: True
runout_gcode:
	{action_respond_info("RUNOUT: Filament runout")}
	M600
event_delay: 3.0
pause_delay: 0.5


[gcode_macro SET_FILAMENT_SENSOR]
description: Checks the current layer number, and if number 2, then enable the sensor that was last in use.
rename_existing: SET_FILAMENT_SENSOR_BASE
gcode:
	
	# Setup the variables to be used
	{% set curr_layer = printer.print_stats.info.current_layer %}	 
	{% set print_state = printer.idle_timeout.state %}	
	
	{% if printer.save_variables.variables.filament_sensor is not defined %}

		{% set filament_sensor = {params.SENSOR|string: params.ENABLE|int} %}
	
	{% endif %}
	
	{% set filament_sensor = printer.save_variables.variables.filament_sensor %}			
	{% set _dummy = filament_sensor.update({params.SENSOR|string: params.ENABLE|int}) %}
	
	# To debug things
	M118 Printer state is currently read as {print_state}, and the current layer is {curr_layer}
	
	
	# If printer in Printing state, then 
	{% if print_state == "Printing" %} 
	
		{% if curr_layer == 2 %}		

			# Enable the last recorded sensor
			RESTORE_FILAMENT_SENSOR
			#SET_FILAMENT_SENSOR_BASE SENSOR={params.SENSOR} ENABLE={params.ENABLE}	
			
			SAVE_VARIABLE VARIABLE=filament_sensor VALUE="{filament_sensor}"
	
	{% elif curr_layer > 2 %}
		
		# If the current layer is not the first one, then save the current filament sensor status
		SAVE_VARIABLE VARIABLE=filament_sensor VALUE="{filament_sensor}"	
			
		{% endif %}
	
	{% endif %}
	
	
			
	#{% set sfs1_detect = printer[filament_motion_sensor SFS_1].filament_detected %}	
	#{% set sfs2_detect = printer[filament_motion_sensor SFS_2].filament_detected %}	
	
	#{% if sfs1_detect = true %}
	#	SET_FILAMENT_SENSOR_BASE SENSOR=SFS_1 ENABLE=1
	#	SET_FILAMENT_SENSOR_BASE SENSOR=SFS_2 ENABLE=0
	#{% elif sfs2_detect = true %}
	#	SET_FILAMENT_SENSOR_BASE SENSOR=SFS_1 ENABLE=0
	#	SET_FILAMENT_SENSOR_BASE SENSOR=SFS_2 ENABLE=1
	#{% endif %}	

		
		
[gcode_macro RESTORE_FILAMENT_SENSOR]
description: Restore the filament sensors on/off as per the last setting
gcode:

	{% if printer.save_variables.variables.filament_sensor is defined %}
	
		{% for sensor in printer.save_variables.variables.filament_sensor %}
		
			M118 {printer.save_variables.variables.filament_sensor[sensor]}
		
		   #SET_FILAMENT_SENSOR_BASE SENSOR={sensor} ENABLE={printer.save_variables.variables.filament_sensor[sensor]}
		   
		{% endfor %}
		
	{% endif %}		

		
	


# [delayed_gcode DISABLE_FILAMENT_SENSORS_STARTUP] # This will disable the SFS second after klipper starts
# initial_duration: 5
# gcode:
    # SET_FILAMENT_SENSOR SENSOR=SFS_1 ENABLE=0
	# SET_FILAMENT_SENSOR SENSOR=SFS_2 ENABLE=0


[gcode_macro CHECK_FILAMENT_SENSORS]
description: Check filament sensor status
gcode:	
	QUERY_FILAMENT_SENSOR SENSOR=SFS_1
	QUERY_FILAMENT_SENSOR SENSOR=SFS_2

[gcode_macro DISABLE_FILAMENT_SENSORS]
description: Disable smart filament sensors
gcode:	
	SET_FILAMENT_SENSOR SENSOR=SFS_1 ENABLE=0
	SET_FILAMENT_SENSOR SENSOR=SFS_2 ENABLE=0

[gcode_macro ENABLE_BOTH_FILAMENT_SENSORS]
description: Enable smart filament sensors
gcode:	
	SET_FILAMENT_SENSOR SENSOR=SFS_1 ENABLE=1
	SET_FILAMENT_SENSOR SENSOR=SFS_2 ENABLE=1

[gcode_macro ENABLE_RIGHT_HAND_FIL_SENSOR]
description: Enable the right hand filament sensor (from front of machine)
gcode:	
	SET_FILAMENT_SENSOR SENSOR=SFS_1 ENABLE=1


[gcode_macro ENABLE_LEFT_HAND_FIL_SENSOR]
description: Enable the right hand filament sensor (from front of machine)
gcode:	
	SET_FILAMENT_SENSOR SENSOR=SFS_2 ENABLE=1
	
