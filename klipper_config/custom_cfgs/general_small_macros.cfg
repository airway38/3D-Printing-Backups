[gcode_macro _CG28] 
description: Only homes if not already homed
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
     LED_STATUS_MESHING                                      # set Stealth Burner LEDs to HOMING
     M117 Homing ...
     G28                                                     # home all
     LED_STATUS_INITIAL                                            # set Stealth Buner LEDs to READY
     M117
  {% endif %}
  
[gcode_macro CALIBRATE_Z] 
gcode:
    PROBE_CALIBRATE
  
[gcode_macro MOVE_TO_PURGE_BUCKET] 
description: Move to the purge bucket position

variable_bucket_mount:        150         # Mount location  
variable_bucket_left_width:   30         
variable_bucket_right_width:  30 
variable_bucket_pos:          1           # purge bucket target - 0 left, 1 right (Gets set randomally in macro)  
variable_brush_centre:        300         # Y centre of brush for wipe
variable_bucket_travel_speed: 350      

gcode:

	_CG28
	
	G90 # Absolute positioning
	
	SET_GCODE_VARIABLE MACRO=move_to_purge_bucket VARIABLE=bucket_pos VALUE={(range(2) | random)}
		
	# Position XY for purge. Calculate starting point for purge
	G1 X{bucket_mount - ((bucket_left_width / 2) + ((bucket_left_width + bucket_right_width) / 2) * bucket_pos)} Y{brush_centre} F{bucket_travel_speed * 60}
	



[gcode_macro WAKE_UP] 
description: Turns the LEDs back to normal operating mode
gcode:
	LED_STATUS_AWAKE
	
[gcode_macro PREHEAT_CHAMBER] 
description: Preheats the chamber
gcode:
	# Home if not already homed
	_CG28
	
	SET_DISPLAY_TEXT MSG="Preheating chamber and bed"

	# Sets SB-leds to heating-mode
	LED_STATUS_HEATING_BED

	# Turns on the PT-fan
	M106 S255	

	# Turn the nevermore on
	SET_FAN_SPEED FAN=nevermore SPEED=1.0

	# Goes to center of the bed
	G1 X150 Y150 Z15 F9000   

	# Sets the target temp for the bed to 115
	M190 S115    

	# Waits for chamber to reach desired temp
	TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM=50
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
	

	
#########################################
# 
# Loop a message on the screen until cancelled
# 0		-				{No message}
# 1		End Print		"Thank you for using a Mom Corp robot"

# #########################################	

# [gcode_macro display_message_test] 
# gcode:
	# UPDATE_DELAYED_GCODE ID=display_message DURATION=2 MSGTEXT=1
	# #UPDATE_DELAYED_GCODE ID=display_message DURATION=2 MSGTEXT=1

# [gcode_macro _message_list]
# # User settings for the StealthBurner status leds. You can change the status colors and led
# # configurations for the logo and nozzle here.
# variable_messages: {
        # 'print_end': { 'Thank you for using a Mom Corp robot, dearie.' }
    # }
# gcode:
    # # This section is required.  Do Not Delete.	
	
# [gcode_macro _set_message]
# gcode:
    
	# # 16 characters to display on screen
     # msg="{transmit}"
	
# [delayed_gcode display_message]
# initial_duration: 0.0
# gcode:
	# # Set the time that each message should be displayed, in seconds
	# {% set disp_time = 2|int %} 
	# # Set the msg_type variable
	# {% set msg_type = params.MSGTYPE|default(0)|int %} 
	
	# {% set message_length = len(params %}	
	
	
	
	# #{% if msg_type == 1 %}
	
		# # First line
		# #SET_DISPLAY_TEXT MSG="Thank you for using"
		# #G4 P{time * 1000 }
		# # Second line 
		# #SET_DISPLAY_TEXT MSG="a Mom Corp robot"
		# #G4 P{time * 1000 }
	
		# UPDATE_DELAYED_GCODE ID=display_message DURATION=2 #MSGTYPE=1
	
	# #{% endif %}
	
	
############################################
#
# Fast gyroid infill
# https://github.com/RomRider/klipper-FastGyroidInfill
#
############################################

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

[menu __main __tune __square_corner_velocity]
type: input
name: SQV: {menu.input}
input: {printer.toolhead.square_corner_velocity}
input_step: 1
input_min: 1
input_max: 50
gcode:
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={menu.input}

[menu __main __tune __square_corner_velocity_infill]
type: input
name: In SQV: {menu.input}
input: {printer.save_variables.variables.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) }
input_step: 1
input_min: 1
input_max: 50
gcode:
  SET_INFILL_SQV SQV={menu.input}