[gcode_macro _CG28] 
description: Only homes if not already homed
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
     STATUS_HOMING                                           # set Stealth Burner LEDs to HOMING
     M117 Homing ...
     G28                                                     # home all
     STATUS_READY                                            # set Stealth Buner LEDs to READY
     M117
  {% endif %}
  
[gcode_macro move_to_purge_bucket] 
description: Move to the purge bucket position

variable_bucket_mount:        150         # Mount location  
variable_bucket_left_width:   30         
variable_bucket_right_width:  30 
variable_bucket_pos:          1           # purge bucket target - 0 left, 1 right (Gets set randomally in macro)  
variable_brush_centre:        300         # Y centre of brush for wipe
variable_bucket_travel_speed: 350      

gcode:

	_CG28
	
	STATUS_CLEANING
	
	G90 # Absolute positioning
	
	SET_GCODE_VARIABLE MACRO=move_to_purge_bucket VARIABLE=bucket_pos VALUE={(range(2) | random)}
		
	# Position XY for purge. Calculate starting point for purge
	G1 X{bucket_mount - ((bucket_left_width / 2) + ((bucket_left_width + bucket_right_width) / 2) * bucket_pos)} Y{brush_centre} F{bucket_travel_speed * 60}


[gcode_macro wake_up] 
description: Turns the LEDs back to normal operating mode
gcode:
	led_set_startup
	
#########################################
# 
# Loop a message on the screen until cancelled
# 0		-				{No message}
# 1		End Print		"Thank you for using a Mom Corp robot"

#########################################	
[delayed_gcode display_message]
initial_duration: 0.0
gcode:
	# Set the time that each message should be displayed, in seconds
	{% set disp_time = 2|int %} 
	# Set the msg_type variable
	{% set msg_type = params.MSGTYPE|default(0)|int %} 
	
	#{% if msg_type == 1 %}
	
		# First line
		SET_DISPLAY_TEXT MSG="Thank you for using"
		G4 P{time * 1000 }
		# Second line 
		SET_DISPLAY_TEXT MSG="a Mom Corp robot"
		G4 P{time * 1000 }
	
		UPDATE_DELAYED_GCODE ID=display_message DURATION=2 #MSGTYPE=1
	
	#{% endif %}
	
	
############################################
#
# Fast gyroid infill
# https://github.com/RomRider/klipper-FastGyroidInfill
#
############################################

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

[menu __main __tune __square_corner_velocity]
type: input
name: SQV: {menu.input}
input: {printer.toolhead.square_corner_velocity}
input_step: 1
input_min: 1
input_max: 50
gcode:
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={menu.input}

[menu __main __tune __square_corner_velocity_infill]
type: input
name: In SQV: {menu.input}
input: {printer.save_variables.variables.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) }
input_step: 1
input_min: 1
input_max: 50
gcode:
  SET_INFILL_SQV SQV={menu.input}